"use strict";(self.webpackChunkqho_640_contemporary_web_application=self.webpackChunkqho_640_contemporary_web_application||[]).push([[5187],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(o),g=n,m=h["".concat(s,".").concat(g)]||h[g]||u[g]||a;return o?r.createElement(m,l(l({ref:t},p),{},{components:o})):r.createElement(m,l({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[h]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<a;c++)l[c]=o[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}g.displayName="MDXCreateElement"},3897:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:3},l="Topic-03: Syncing Changes from Collaborator to Owner's Repository",i={unversionedId:"Topic-03 Synchronising Changes from Collaborator to Owners Repo",id:"Topic-03 Synchronising Changes from Collaborator to Owners Repo",title:"Topic-03: Syncing Changes from Collaborator to Owner's Repository",description:"Synchronizing changes made by a collaborator to the owner's repository on GitHub involves the following steps:",source:"@site/Git_Tutorial/Topic-03 Synchronising Changes from Collaborator to Owners Repo.md",sourceDirName:".",slug:"/Topic-03 Synchronising Changes from Collaborator to Owners Repo",permalink:"/QHO640-Contemporary-Web-Application-Notes/Git_Tutorial/Topic-03 Synchronising Changes from Collaborator to Owners Repo",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Topic-02: Cloning the Repository",permalink:"/QHO640-Contemporary-Web-Application-Notes/Git_Tutorial/Topic-02 Cloning Project"}},s={},c=[{value:"Syncing Changes from Collaborator to Owner&#39;s Repository",id:"syncing-changes-from-collaborator-to-owners-repository",level:3},{value:"1. Review Collaborator&#39;s Changes:",id:"1-review-collaborators-changes",level:4},{value:"2. Merge Changes via Pull Request:",id:"2-merge-changes-via-pull-request",level:4},{value:"Steps for the Owner/Project Manager:",id:"steps-for-the-ownerproject-manager",level:3},{value:"3. Pull Changes Locally:",id:"3-pull-changes-locally",level:4},{value:"4. Review and Resolve Conflicts:",id:"4-review-and-resolve-conflicts",level:4},{value:"5. Test Changes (if required):",id:"5-test-changes-if-required",level:4},{value:"6. Commit and Push Changes:",id:"6-commit-and-push-changes",level:4},{value:"Final Notes:",id:"final-notes",level:3}],p={toc:c},h="wrapper";function u(e){let{components:t,...o}=e;return(0,n.kt)(h,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"topic-03-syncing-changes-from-collaborator-to-owners-repository"},"Topic-03: Syncing Changes from Collaborator to Owner's Repository"),(0,n.kt)("p",null,"Synchronizing changes made by a collaborator to the owner's repository on GitHub involves the following steps:"),(0,n.kt)("h3",{id:"syncing-changes-from-collaborator-to-owners-repository"},"Syncing Changes from Collaborator to Owner's Repository"),(0,n.kt)("h4",{id:"1-review-collaborators-changes"},"1. Review Collaborator's Changes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The owner or project manager should review the changes proposed by the collaborator. This typically occurs through a pull request.")),(0,n.kt)("h4",{id:"2-merge-changes-via-pull-request"},"2. Merge Changes via Pull Request:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the changes are satisfactory, the owner or project manager can merge the collaborator's changes into the main branch of the repository.")),(0,n.kt)("h3",{id:"steps-for-the-ownerproject-manager"},"Steps for the Owner/Project Manager:"),(0,n.kt)("h4",{id:"3-pull-changes-locally"},"3. Pull Changes Locally:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"On the owner's local machine, navigate to the project directory using the terminal or command line.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Pull the changes from the remote repository to the local repository:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"git pull origin main  // Replace 'main' with the name of the main branch\n")))),(0,n.kt)("h4",{id:"4-review-and-resolve-conflicts"},"4. Review and Resolve Conflicts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If there are any conflicts between the collaborator's changes and the existing code in the main branch, resolve these conflicts locally.")),(0,n.kt)("h4",{id:"5-test-changes-if-required"},"5. Test Changes (if required):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"It's recommended to test the merged code locally to ensure it functions as expected.")),(0,n.kt)("h4",{id:"6-commit-and-push-changes"},"6. Commit and Push Changes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"After resolving any conflicts and testing the merged code, commit the changes locally:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'git add .\ngit commit -m "Merged collaborator\'s changes"\ngit push origin main\n')))),(0,n.kt)("h3",{id:"final-notes"},"Final Notes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When merging changes from a collaborator, it's essential to ensure that the changes don't conflict with the existing codebase. Review and resolve conflicts carefully."),(0,n.kt)("li",{parentName:"ul"},"It's recommended to communicate with the collaborator regarding any issues or questions related to their changes."),(0,n.kt)("li",{parentName:"ul"},"Regularly communicate and coordinate changes among collaborators to maintain a smooth workflow and minimize conflicts.")),(0,n.kt)("p",null,"By following these steps, the owner or project manager can synchronize changes made by a collaborator back to the main repository, ensuring that the codebase is updated and reflecting the latest contributions."))}u.isMDXComponent=!0}}]);